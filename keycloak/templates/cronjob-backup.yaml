{{ if and .Values.backup.enabled }}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: backup-sql
  namespace: {{ .Release.Namespace }}
spec:
  schedule: "{{ .Values.backup.scheduler }}"
  successfulJobsHistoryLimit: {{ .Values.backup.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.backup.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      template:
        spec:
          securityContext:
            runAsUser: 0
          initContainers:
          - name: init-ssh-key
            image: busybox
            args:
            - /bin/sh
            - -c
            - mkdir /work-dir2/.ssh/; cp /tmp/ssh/sshKey /work-dir2/.ssh/id_rsa;chmod 600 /work-dir2/.ssh/id_rsa
            volumeMounts:
            - name: workdir
              mountPath: "/work-dir2"
            - name: backup-scripts
              mountPath: /scripts
            - name: secret-ssh
              mountPath: /tmp/ssh
          - name: init-passwd
            image: busybox
            args:
            - /bin/sh
            - -c
            - echo "*:*:*:$(POSTGRESQL_USER):$(POSTGRESQL_PASSWD)" > /work-dir/.pgpass;chmod 600 /work-dir/.pgpass
            env:
              - name: POSTGRESQL_USER
                value: {{ index .Values "postgresql-ha" "postgresql" "username" | quote }}
              - name: POSTGRESQL_PASSWD
                value: {{ index .Values "postgresql-ha" "postgresql" "password" | quote }}
            volumeMounts:
            - name: workdir
              mountPath: "/work-dir"
          containers:
          - name: backup
            image: docker.io/jaesanglee/backup-postgresql
            command:
            - sh
            - -c 
            - /scripts/backup.sh
            env:
              - name: POSTGRESQL_HOST
                value: {{ printf "%s-pgpool" (include "keycloak.postgresql-ha.fullname" .) }}
              - name: POSTGRESQL_USER
                value: {{ index .Values "postgresql-ha" "postgresql" "username" | quote }}
              - name: BACKUP_USER
                value: {{ .Values.backup.user }}
              - name: BACKUP_HOST
                value: {{ .Values.backup.host }}
              - name: BACKUP_DESTINATION
                value: {{ .Values.backup.destination }}
            volumeMounts:
            - name: workdir
              mountPath: "/root"
            - name: backup-scripts
              mountPath: /scripts
              readOnly: true
          restartPolicy: OnFailure
          volumes:
          - name: workdir
            emptyDir: {}
          - name: backup-scripts
            configMap:
              name: backup-sql-cm
              defaultMode: 0555
          - name: secret-ssh
            secret:
              secretName: secret-ssh
{{ end }}
