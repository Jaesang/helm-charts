apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "cloud-console.fullname" . }}
  labels:
    app: {{ template "cloud-console.name" . }}
    chart: {{ template "cloud-console.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
data:
  tacomo.conf: |-
    [system]
    service.port={{ .Values.config.service.port }}
    service.proxyportlist={{ .Values.config.service.proxyportlist }}
    service.proxyurl.format={{ .Values.config.service.proxyurl.format }}
    service.https.use={{ .Values.config.service.https.use }}
    service.https.keystore={{ .Values.config.service.https.keystore.keyfile }}
    service.https.keystore.type={{ .Values.config.service.https.keystore.type }}
    service.https.keystore.password={{ .Values.config.service.https.keystore.password }}
    service.https.keystore.alias={{ .Values.config.service.https.keystore.alias }}
    service.https.ciphers={{ .Values.config.service.https.ciphers }}
    service.https.enabledprotocols={{ .Values.config.service.https.enabledprotocols }}
    service.db.backup.username={{ .Values.config.service.db.backup.username }}
    service.db.backup.password={{ .Values.config.service.db.backup.password }}
    service.db.restore.path={{ .Values.config.service.db.restore.path }}
    service.db.restore.username={{ .Values.config.service.db.restore.username }}
    service.db.restore.password={{ .Values.config.service.db.restore.password }}
    service.versions={{ .Values.config.service.versions }}
    [logs]
    log.level={{ .Values.config.log.level }}
    log.path={{ .Values.config.log.path }}
    log.max.file.size={{ .Values.config.log.max.fileSize }}
    log.max.history={{ .Values.config.log.max.history }}
    [ldap]
    ldap.login.use={{ .Values.config.ldap.loginUse }}
    ldap.server.ip={{ .Values.config.ldap.server.ip }}
    ldap.server.port={{ .Values.config.ldap.server.port }}
    ldap.ssl.enable={{ .Values.config.ldap.ssl.enable }}
    ldap.ssl.cert.validation.skip={{ .Values.config.ldap.ssl.certValidationSkip }}
    ldap.user.dn.pattern={{ .Values.config.ldap.userDnPattern }}
    ldap.conn.timeout={{ .Values.config.ldap.connTimeout }}
    ldap.read.timeout={{ .Values.config.ldap.readTimeout }}
    [security]
    security.session.timeout={{ .Values.config.security.sessionTimeout }}
    [kibana]
    kibana.authkey={{ .Values.config.kibana.authkey }}
    [grafana]
    grafana.authkey={{ .Values.config.grafana.authkey }}
    [kubernetes]
    k8s.api.prometheusrule.url={{ .Values.config.prometheus.ruleUrl }}
    k8s.api.loggingfilter.url={{ .Values.config.loggingfilter.url }}
    filter.rule={{ .Values.config.filter.rule }}
    [keycloak]
    keycloak.enabled={{ .Values.config.keycloak.enabled }}
    keycloak.url={{ .Values.config.keycloak.url }}
    keycloak.realm={{ .Values.config.keycloak.realm }}
    keycloak.clientId={{ .Values.config.keycloak.clientId }}
    keycloak.hasRealmRole1={{ .Values.config.keycloak.hasRealmRole1 }}
    keycloak.hasRealmRole2={{ .Values.config.keycloak.hasRealmRole2 }}
    keycloak.hasRealmRole3={{ .Values.config.keycloak.hasRealmRole3 }}
    keycloak.cacert={{ .Values.config.keycloak.cacert }}
    [Lenz]
    lenz.url = {{ .Values.config.lenz.url }}
    
    {{- with .Values.config.extra.config }}
      {{- toYaml . | nindent 5 }}
    {{- end }}


  prometheusrule.json: |-
    {
      "apiVersion" : "monitoring.coreos.com/v1",
      "kind" : "PrometheusRule",
      "metadata" : {
        "annotations":{ 
          "prometheus-operator-validated":"true"
        },
        "name" : "",
        "namespace" : "mon"
      },
      "spec" : {
        "groups" : [ {
          "name" : "",
          "rules" : [ {
            "alert" : "",
            "annotations" : {
              "message" : ""
            },
            "expr" : "",
            "for" : "",
            "labels" : {
              "severity" : ""
            }
          } ]
        } ]
      }
    }

  loggingfilter.json: |-
    {
      "apiVersion": "logging.kubesphere.io/v1alpha2",
      "kind": "Filter",
      "metadata": {
        "labels": {
          "logging.kubesphere.io/enabled": "true"
        },
        "name": "%_filter_resource_name_%",
        "namespace": "%_namespace_%"
      },
      "spec": {
        "filters": [
          {
            "kubernetes": {
              "annotations": false,
              "kubeURL": "%_kube_api_url_%",
              "labels": false,
              "mergeLog": true
            }
          },
          {
            "nest": {
              "addPrefix": "kubernetes_",
              "nestedUnder": "kubernetes",
              "operation": "lift"
            }
          },
          {
            "modify": {
              "rules": [
                {
                  "remove": "stream"
                },
                {
                  "remove": "kubernetes_pod_id"
                },
                {
                  "remove": "kubernetes_docker_id"
                },
                {
                  "remove": "kubernetes_container_hash"
                }
              ]
            }
          },
          {
            "nest": {
              "nestUnder": "kubernetes",
              "operation": "nest",
              "removePrefix": "kubernetes_",
              "wildcard": [
                "kubernetes_*"
              ]
            }
          },
          {
            "rewriteTag": {
              "emitterName": "alertrule_match",
              "emitterStorageType": "memory",
              "rules": [
                {
                  "keep": true,
                  "key": "$log",
                  "newTag": "m_critical.$TAG",
                  "regex": "(update.?error)"
                }
              ]
            }
          }
        ],
        "match": "kube.*"
      }
    }

  tacomodb_1.sql: |-
    CREATE TABLE IF NOT EXISTS "properties" (
      "prop_key"  TEXT NOT NULL,
      "prop_value"  TEXT DEFAULT NULL,
      PRIMARY KEY("prop_key")
    );
    CREATE TABLE IF NOT EXISTS "user" (
      "id"  TEXT NOT NULL,
      "passwd"  TEXT NOT NULL,
      PRIMARY KEY("id")
    );
    CREATE TABLE IF NOT EXISTS "cluster" (
      "id"  TEXT NOT NULL,
      "kibana_url"  TEXT DEFAULT NULL,
      "grafana_url"  TEXT DEFAULT NULL,
      "k8s_url"  TEXT DEFAULT NULL,
      "k8s_token"  TEXT DEFAULT NULL,
      "is_main"  INTEGER NOT NULL DEFAULT 0,
      "main_page_type"  TEXT DEFAULT NULL,
      "main_page_link"  TEXT DEFAULT NULL,
      "k8s_page_type"  TEXT DEFAULT NULL,
      "k8s_page_link"  TEXT DEFAULT NULL,
      "openstack_page_type"  TEXT DEFAULT NULL,
      "openstack_page_link"  TEXT DEFAULT NULL,
      "ceph_page_type"  TEXT DEFAULT NULL,
      "ceph_page_link"  TEXT DEFAULT NULL,
      "k8s_ca_cert"  TEXT DEFAULT NULL,
      "k8s_url_lenz"  TEXT DEFAULT NULL,
      PRIMARY KEY("id")
    );
    CREATE TABLE IF NOT EXISTS "cluster_menu" (
      "cluster_id"  TEXT NOT NULL,
      "id"  INTEGER NOT NULL,
      "parent_id"  INTEGER NOT NULL,
      "name"  TEXT NOT NULL,
      "seq"  INTEGER NOT NULL,
      "link"  TEXT DEFAULT NULL,
      "url_type"  TEXT DEFAULT NULL,
      "popup_type"  TEXT DEFAULT NULL,
      "default_yn"  INTEGER NOT NULL DEFAULT 1,
      CONSTRAINT "fk_cluster" FOREIGN KEY("cluster_id") REFERENCES "cluster"("id") ON DELETE CASCADE,
      PRIMARY KEY("cluster_id","id")
    );
    CREATE TABLE IF NOT EXISTS "main_menu" (
      "cluster_id"  TEXT NOT NULL,
      "overview_yn"  TEXT NOT NULL,
      "k8s_yn"  TEXT NOT NULL,
      "openstack_yn"  TEXT NOT NULL,
      "ceph_yn"  TEXT NOT NULL,
      PRIMARY KEY("cluster_id")
    );
    
{{- if .Values.config.initDB }}
    /* INSERT DEFAULT PROPERTIES AND USER */
    INSERT INTO "properties" VALUES ('db_revision','1');
    INSERT INTO "properties" VALUES ('theme_type','light');
    INSERT INTO "user" VALUES ('taco','password');
{{- end }}
    
{{- with .Values.config.extra.sql }}
{{- . | nindent 4 }}
{{- end }}
